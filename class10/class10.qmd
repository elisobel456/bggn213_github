---
title: "class10"
author: "Eli Sobel A69027989"
format: pdf
---

# download csv from pdb website-> “Analyze” > “PDB Statistics” > “by Experimental Method and Molecular Type”

```{r}
pdbstats <- read.csv("C:/Users/eliso/Downloads/Data_Export_Summary.csv", row.names = 1)
pdbstats
pdbstats$Total
```

# Remove commas

```{r}
convert_comma_numbers <- function(x) {
  x <- gsub(",","",x)
  x <- as.numeric(x)
  
  return(x)
}

convert_comma_numbers(pdbstats$Total)
```



> Q1: What percentage of structures in the PDB are solved by X-Ray and Electron Microscopy.

In PDB, 83% of structures are solved by X-ray, and 10% of the structures are solved by EM.



# The `apply()` function is very useful as it can take any function and "apply" it over either the ROWS or COLs of a data.frame.

```{r}
n.tot <- sum( convert_comma_numbers(pdbstats$Total) )
n.tot
```

```{r}
colSums(apply(pdbstats, 2, convert_comma_numbers)) / n.tot
```

# How to do the same thing without `apply()`

```{r}
n.xray <- sum(convert_comma_numbers(pdbstats$X.ray))
n.em <- sum(convert_comma_numbers(pdbstats$EM))

n.xray/n.tot * 100
n.em/n.tot * 100
```

# Another way to read in the csv without having to remove commas is to download and use the readr package

```{r}
# library(readr)
# read_csv("C:/Users/eliso/Downloads/Data_Export_Summary.csv")
```





# make new dataframe with no commas

```{r}
pdb_nc <- apply(pdbstats, c(1,2), convert_comma_numbers)
pdb_nc
```


```{r}
# pdb$Total/ sum(pdb$Total)
```


> Q3: Type HIV in the PDB website search box on the home page and determine how many HIV-1 protease structures are in the current PDB?





## Using Mol*

> Q5: There is a critical “conserved” water molecule in the binding site. Can you identify this water molecule? What residue number does this water molecule have

HOH308 is the conserved water molecule

![My first image from Mol-star](1HSG.png)

> Q6: Generate and save a figure clearly showing the two distinct chains of HIV-protease along with the ligand. You might also consider showing the catalytic residues ASP 25 in each chain and the critical water (we recommend “Ball & Stick” for these side-chains). Add this figure to your Quarto document.

![The very important aspartic acid residue!](1HSG_2.png)



## Bio3D package for structural bioinformatics

```{r}
library(bio3d)

pdb <- read.pdb("1hsg")
pdb
```

```{r}
attributes(pdb)
```

```{r}
head(pdb$atom)
```

```{r}
pdbseq(pdb)[25]
```



> Q7: How many amino acid residues are there in this pdb object? 

198

```{r}
length( pdbseq(pdb))
```

> Q8: Name one of the two non-protein residues?



> Q9: How many protein chains are in this structure? 

There are two chains


## Functional dynamics prediction

```{r}
adk <- read.pdb("6s36")
adk
```


```{r}
# install r3dmol and shiny
# source("https://tinyurl.com/viewpdb")
# library(r3dmol)
# view.pdb(pdb)
```

```{r}
# install r3dmol and shiny
# source("https://tinyurl.com/viewpdb")
# library(r3dmol)
# view.pdb(adk)
```

```{r}
#modes <- nma(adk)
#plot(modes)
```

```{r}
#mktrj(modes, file="adk.pdb")
```


```{r}
#adk <- read.pdb("6s36")
#modes <- nma(adk)
#mktrj(modes, pdb=adk, file="adk.pdb")
```

